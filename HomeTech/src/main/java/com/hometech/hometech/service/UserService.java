package com.hometech.hometech.service;

import com.hometech.hometech.Repository.AccountReposirory;
import com.hometech.hometech.enums.RoleType;
import com.hometech.hometech.model.Account;
import com.hometech.hometech.model.User;
import com.hometech.hometech.Repository.UserRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class UserService {

    private final UserRepository userRepository;
    private final AccountReposirory accountReposirory;

    public UserService(UserRepository userRepository, AccountReposirory accountReposirory) {
        this.userRepository = userRepository;
        this.accountReposirory = accountReposirory;
    }

    // L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ho·∫°t ƒë·ªông
    public void updateUserStatus(Long id, boolean active) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID: " + id));
        user.setActive(active);
        userRepository.save(user);
    }
    public void updateUserRole(Long id, RoleType roleName) {
        Account account = accountReposirory.findById(id)
                .orElseThrow(() -> new RuntimeException("User kh√¥ng t·ªìn t·∫°i"));
        account.setRole(roleName);
        accountReposirory.save(account);
    }
    public long countAll() { return userRepository.count(); }
    public long countByStatus(boolean active) { return userRepository.countByActive(active); }
    // üü¢ T√¨m ki·∫øm ng∆∞·ªùi d√πng
    public List<User> searchUsers(String keyword) {
        if (keyword == null || keyword.trim().isEmpty()) {
            return userRepository.findAll(); // n·∫øu √¥ t√¨m ki·∫øm tr·ªëng -> tr·∫£ t·∫•t c·∫£
        }
        return userRepository.findByFullNameContainingIgnoreCaseOrAccount_EmailContainingIgnoreCase(keyword, keyword);
    }
}
