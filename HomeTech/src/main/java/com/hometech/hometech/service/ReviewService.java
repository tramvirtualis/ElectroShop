package com.hometech.hometech.service;

import com.hometech.hometech.model.Customer;
import com.hometech.hometech.model.Product;
import com.hometech.hometech.model.Review;
import com.hometech.hometech.Repository.CustomerRepository;
import com.hometech.hometech.Repository.ProductRepository;
import com.hometech.hometech.Repository.ReviewRepository;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.List;

@Service
public class ReviewService {

    private final ReviewRepository reviewRepository;
    private final ProductRepository productRepository;
    private final CustomerRepository customerRepository;

    public ReviewService(ReviewRepository reviewRepository,
                         ProductRepository productRepository,
                         CustomerRepository customerRepository) {
        this.reviewRepository = reviewRepository;
        this.productRepository = productRepository;
        this.customerRepository = customerRepository;
    }

    // üü¢ Th√™m ho·∫∑c c·∫≠p nh·∫≠t ƒë√°nh gi√°
    public Review addOrUpdateReview(int productID, int userID, int ratingValue, String comment, MultipartFile imageFile) {
        Product product = productRepository.findById(productID)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: " + productID));

        Customer customer = customerRepository.findById(userID)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID: " + userID));

        Review review = reviewRepository.findByCustomerAndProduct(customer, product).orElse(null);
        if (review == null) {
            review = new Review();
            review.setProduct(product);
            review.setCustomer(customer);
            review.setCreatedAt(LocalDateTime.now());
        }

        review.setRatingValue(ratingValue);
        review.setComment(comment);
        review.setUpdatedAt(LocalDateTime.now());

        if (imageFile != null && !imageFile.isEmpty()) {
            try {
                review.setImage(imageFile.getBytes());
            } catch (IOException e) {
                throw new RuntimeException("Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh t·∫£i l√™n: " + e.getMessage());
            }
        }

        return reviewRepository.save(review);
    }

    // üü¢ Review cho ng∆∞·ªùi d√πng (ch·ªâ hi·ªÉn th·ªã review ch∆∞a b·ªã ·∫©n)
    public List<Review> getVisibleReviewsByProduct(int productID) {
        Product product = productRepository.findById(productID)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: " + productID));
        return reviewRepository.findByProductAndHiddenFalse(product);
    }

    // üü¢ Review cho admin (hi·ªÉn th·ªã t·∫•t c·∫£, k·ªÉ c·∫£ ·∫©n)
    public List<Review> getAllReviewsByProduct(int productID) {
        Product product = productRepository.findById(productID)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: " + productID));
        return reviewRepository.findByProduct(product);
    }

    // üü¢ T√≠nh trung b√¨nh s·ªë sao
    public double getAverageRating(int productID) {
        Product product = productRepository.findById(productID)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: " + productID));
        Double avg = reviewRepository.getAverageRatingByProduct(product);
        return avg != null ? avg : 0.0;
    }

    // === API as requested ===
    public List<Review> findByProductId(int productId) {
        return reviewRepository.findByProduct_ProductIDAndHiddenFalse(productId);
    }

    public Double calculateAverageRating(int productId) {
        Double avg = reviewRepository.getAverageRatingByProductId(productId);
        return avg != null ? avg : 0.0;
    }

    public Review saveReview(Review review) {
        return reviewRepository.save(review);
    }

    // üü¢ Admin xem t·∫•t c·∫£ review trong h·ªá th·ªëng
    public List<Review> getAllReviews() {
        return reviewRepository.findAll();
    }

    // üü¢ Xem 1 review c·ª• th·ªÉ
    public Review getReviewById(int reviewId) {
        return reviewRepository.findById(reviewId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë√°nh gi√° v·ªõi ID: " + reviewId));
    }

    // üü¢ ·∫®n review
    public void hideReviewById(int reviewId) {
        Review review = reviewRepository.findById(reviewId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë√°nh gi√°"));
        review.setHidden(true);
        reviewRepository.save(review);
    }

    // üü¢ Hi·ªán l·∫°i review
    public void unhideReviewById(int reviewId) {
        Review review = reviewRepository.findById(reviewId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë√°nh gi√°"));
        review.setHidden(false);
        reviewRepository.save(review);
    }
}
